import{_ as s,o as a,c as p,Q as n}from"./chunks/framework.fd95ed2e.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Frontend/生态.md","filePath":"Frontend/生态.md"}'),o={name:"Frontend/生态.md"},e=n(`<h2 id="javascript运行时" tabindex="-1">JavaScript运行时 <a class="header-anchor" href="#javascript运行时" aria-label="Permalink to &quot;JavaScript运行时&quot;">​</a></h2><p><strong>1、嵌入HTML</strong>：JS可以嵌入HTML运行；</p><p><strong>2、v8引擎(Chrome)</strong>：由C++实现的程序，接收Javascript代码，根据操作系统编译成可以运行的汇编指令；</p><p>功能：编译、执行、内存管理、垃圾回收、JIT热点优化(可能发生回退字节码)；</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#B392F0;">Javascript</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--[Parser]--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">AST</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--[Interpreter]--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ByteCode</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--[Compiler]--</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Machine</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">code</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Javascript</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--[Parser]--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">AST</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--[Interpreter]--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ByteCode</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--[Compiler]--</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Machine</span><span style="color:#24292E;"> </span><span style="color:#032F62;">code</span></span></code></pre></div><ul><li><p>NoteJs：基于V8引擎，JS服务端运行环境；</p></li><li><p>deno：基于V8引擎和Rust实现的JS运行时；</p></li></ul><h2 id="模块化标准" tabindex="-1">模块化标准 <a class="header-anchor" href="#模块化标准" aria-label="Permalink to &quot;模块化标准&quot;">​</a></h2><p>Javascript最初不具备模块化能力，随着社区发展，逐步出现多种模块化标准，其中CommonJS和ES6最突出；并分别在各自领域发展；</p><p>1、<strong>CommonJS</strong>：原JS模块化标准，后由NodeJs扩展实现，现专指NodeJs中的模块化的标准；</p><p>2、<strong>ES6(ECMAScript 6.0)</strong>：是Javascript语言本身发展而来的原生的模块化；</p><p>除此之外，还有AMD、UMD等模块化标准，但是使用场景很少；</p><h2 id="包管理工具" tabindex="-1">包管理工具 <a class="header-anchor" href="#包管理工具" aria-label="Permalink to &quot;包管理工具&quot;">​</a></h2><p>1、npm</p><p>2、yarn</p><p>3、pnpm</p><h2 id="构建工具" tabindex="-1">构建工具 <a class="header-anchor" href="#构建工具" aria-label="Permalink to &quot;构建工具&quot;">​</a></h2><p>1、webpack</p><ul><li><p>module：未编译的模块化代码；</p></li><li><p>chunk：编译后的文件；</p></li><li><p>bundle：打包之后在浏览器中运行的代码文件；(bundle.js)</p></li></ul><p>2、vite</p>`,19),l=[e];function t(r,c,i,d,y,h){return a(),p("div",null,l)}const u=s(o,[["render",t]]);export{_ as __pageData,u as default};
