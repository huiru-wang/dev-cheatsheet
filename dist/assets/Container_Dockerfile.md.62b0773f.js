import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.fd95ed2e.js";const u=JSON.parse('{"title":"Dockerfile","description":"","frontmatter":{},"headers":[],"relativePath":"Container/Dockerfile.md","filePath":"Container/Dockerfile.md"}'),o={name:"Container/Dockerfile.md"},p=l(`<h1 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h1><p>DockerFile：定制化的镜像描述文件</p><ul><li>定制化；</li><li>精简镜像大小；</li></ul><h2 id="dockerfile指令" tabindex="-1">Dockerfile指令 <a class="header-anchor" href="#dockerfile指令" aria-label="Permalink to &quot;Dockerfile指令&quot;">​</a></h2><ul><li><p><code>FROM</code>：指定基础镜像 <code>FROM ubuntu:latest</code></p></li><li><p><code>RUN</code>：在镜像中执行命令 <code>RUN apt-get update &amp;&amp; apt-get install -y curl</code></p></li><li><p><code>COPY</code>：将文件或目录从主机复制到镜像中，<code>COPY app.py /app/</code></p></li><li><p><code>ADD</code>：类似于COPY指令，但还可以从URL或归档文件中添加文件</p><p><code>ADD http://example.com/big.tar.gz /opt/</code></p></li><li><p><code>WORKDIR</code>：设置工作目录 <code>WORKDIR /app/</code></p></li><li><p><code>EXPOSE</code>：声明容器将使用哪些端口 <code>EXPOSE 80</code></p></li><li><p><code>CMD</code>：指定默认的容器启动命令和参数 <code>CMD [&quot;python&quot;, &quot;app.py&quot;]</code></p></li><li><p><code>ENTRYPOINT</code>：指定容器启动时要运行的命令 <code>ENTRYPOINT [&quot;python&quot;, &quot;app.py&quot;]</code></p></li><li><p><code>ENV</code>：设置环境变量 <code>ENV MY_KEY=&quot;my_value&quot;</code></p></li><li><p><code>ARG</code>：定义构建时传递给镜像的参数 <code>ARG version</code></p><p>Dockerfile文件中的某些参数需要在构建镜像时通过命令行动态调整，可以使用<code>ARG</code>将Dockerfile中的某些值设置为参数；</p><p>在命令行中，使用：<code>--build-arg version=1.19</code>来传入动态参数；</p></li><li><p><code>USER</code>：指定容器内命令(<code>RUN xxx</code>)执行的用户；需要保证权限(可以使用RUN命令创建用户、赋予权限等)；</p></li><li><p><code>MAINTAINER</code>：作者、维护者信息：huiru<a href="mailto:xxxx@xxx.com" target="_blank" rel="noreferrer">xxxx@xxx.com</a>（可选、可设置多个）</p></li></ul><p>-- <code>LABEL</code>：镜像的标签描述信息；（可选）</p><p><code>LABEL description=&quot;Hello&quot;</code>、<code>LABEL version=&quot;0.0.1&quot;</code></p><h2 id="创建dockerfile" tabindex="-1">创建Dockerfile <a class="header-anchor" href="#创建dockerfile" aria-label="Permalink to &quot;创建Dockerfile&quot;">​</a></h2><div class="language-dockerfile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">dockerfile</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 构建时动态参数</span></span>
<span class="line"><span style="color:#F97583;">ARG</span><span style="color:#E1E4E8;"> version=1.18.3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> golang:$version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义变量：$WORKDIR, 项目路径</span></span>
<span class="line"><span style="color:#F97583;">ENV</span><span style="color:#E1E4E8;"> WORKDIR /root/go-gin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 类似于COPY指令，但还可以从URL或归档文件中添加文件，例如ADD http://example.com/big.tar.gz /opt/。</span></span>
<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> main $WORKDIR/main</span></span>
<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> config/application.yml $WORKDIR/config/application.yml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 执行权限命令</span></span>
<span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> chmod +x $WORKDIR/main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置工作目录，例如WORKDIR /app/。</span></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> $WORKDIR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="color:#F97583;">EXPOSE</span><span style="color:#E1E4E8;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 容器启动时 在工作目录下执行命令</span></span>
<span class="line"><span style="color:#F97583;">ENTRYPOINT</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;./main&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 构建时动态参数</span></span>
<span class="line"><span style="color:#D73A49;">ARG</span><span style="color:#24292E;"> version=1.18.3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">FROM</span><span style="color:#24292E;"> golang:$version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 定义变量：$WORKDIR, 项目路径</span></span>
<span class="line"><span style="color:#D73A49;">ENV</span><span style="color:#24292E;"> WORKDIR /root/go-gin</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 类似于COPY指令，但还可以从URL或归档文件中添加文件，例如ADD http://example.com/big.tar.gz /opt/。</span></span>
<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> main $WORKDIR/main</span></span>
<span class="line"><span style="color:#D73A49;">ADD</span><span style="color:#24292E;"> config/application.yml $WORKDIR/config/application.yml</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 执行权限命令</span></span>
<span class="line"><span style="color:#D73A49;">RUN</span><span style="color:#24292E;"> chmod +x $WORKDIR/main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置工作目录，例如WORKDIR /app/。</span></span>
<span class="line"><span style="color:#D73A49;">WORKDIR</span><span style="color:#24292E;"> $WORKDIR</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 暴露端口</span></span>
<span class="line"><span style="color:#D73A49;">EXPOSE</span><span style="color:#24292E;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 容器启动时 在工作目录下执行命令</span></span>
<span class="line"><span style="color:#D73A49;">ENTRYPOINT</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;./main&quot;</span><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="构建镜像" tabindex="-1">构建镜像 <a class="header-anchor" href="#构建镜像" aria-label="Permalink to &quot;构建镜像&quot;">​</a></h2><h3 id="_1-从dockerfile构建镜像" tabindex="-1">1. 从Dockerfile构建镜像 <a class="header-anchor" href="#_1-从dockerfile构建镜像" aria-label="Permalink to &quot;1. 从Dockerfile构建镜像&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 从path目录的Dockerfile或URL的Dockerfile创建镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> [OPTIONS] [PATH / URL] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">whr/mess:v1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rm=true</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 从path目录的Dockerfile或URL的Dockerfile创建镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> [OPTIONS] [PATH / URL] </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-t</span><span style="color:#24292E;"> </span><span style="color:#032F62;">whr/mess:v1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rm=true</span><span style="color:#24292E;"> </span><span style="color:#032F62;">.</span></span></code></pre></div><ul><li><code>-t [IMAGE_NAME:VERSION]</code>：创建并指定镜像名和版本；</li><li><code>-f /path/to/a/Dockerfile</code>：指定Dockerfile创建；</li><li>--rm：创建完成，删除产生的中间镜像；</li></ul><h3 id="_2-从已有容器构建镜像" tabindex="-1">2. 从已有容器构建镜像 <a class="header-anchor" href="#_2-从已有容器构建镜像" aria-label="Permalink to &quot;2. 从已有容器构建镜像&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-a</span><span style="color:#E1E4E8;"> [author] -m [description] [contaner_name/id] [REPOSITORY[:TAG]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-a</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hr&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;my images&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">92</span><span style="color:#9ECBFF;">e23f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app:1.0.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span><span style="color:#24292E;"> [author] -m [description] [contaner_name/id] [REPOSITORY[:TAG]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hr&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-m</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;my images&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">92</span><span style="color:#032F62;">e23f</span><span style="color:#24292E;"> </span><span style="color:#032F62;">app:1.0.0</span></span></code></pre></div>`,15),e=[p];function c(t,r,i,d,y,E){return a(),n("div",null,e)}const h=s(o,[["render",c]]);export{u as __pageData,h as default};
