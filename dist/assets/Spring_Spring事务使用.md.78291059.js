import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.fd95ed2e.js";const F=JSON.parse('{"title":"Spring事务","description":"","frontmatter":{},"headers":[],"relativePath":"Spring/Spring事务使用.md","filePath":"Spring/Spring事务使用.md"}'),l={name:"Spring/Spring事务使用.md"},p=o(`<h1 id="spring事务" tabindex="-1">Spring事务 <a class="header-anchor" href="#spring事务" aria-label="Permalink to &quot;Spring事务&quot;">​</a></h1><h2 id="配置开启" tabindex="-1">配置开启 <a class="header-anchor" href="#配置开启" aria-label="Permalink to &quot;配置开启&quot;">​</a></h2><p>SpringBoot不需要任何配置，直接使用@Transaction即可，如果要使用全局事务管理器，则需要自行配置</p><p>Spring中使用需要额外配置，方式有以下几种</p><h3 id="_1-注解配置" tabindex="-1">1. 注解配置 <a class="header-anchor" href="#_1-注解配置" aria-label="Permalink to &quot;1. 注解配置&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Qualifier</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> DataSourceTransactionManager </span><span style="color:#B392F0;">txManager</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">Autowired</span><span style="color:#E1E4E8;"> HikariDataSource hikariDataSource){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataSourceTransactionManager</span><span style="color:#E1E4E8;">(hikariDataSource);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Qualifier</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> DataSourceTransactionManager </span><span style="color:#6F42C1;">txManager</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">Autowired</span><span style="color:#24292E;"> HikariDataSource hikariDataSource){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataSourceTransactionManager</span><span style="color:#24292E;">(hikariDataSource);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_2-xml配置" tabindex="-1">2. xml配置 <a class="header-anchor" href="#_2-xml配置" aria-label="Permalink to &quot;2. xml配置&quot;">​</a></h3><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;dataSource&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hikariDataSource&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">bean</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">bean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;dataSource&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hikariDataSource&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">bean</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h2 id="spring中使用事务" tabindex="-1">Spring中使用事务 <a class="header-anchor" href="#spring中使用事务" aria-label="Permalink to &quot;Spring中使用事务&quot;">​</a></h2><h3 id="_1-全局事务管理" tabindex="-1">1. 全局事务管理 <a class="header-anchor" href="#_1-全局事务管理" aria-label="Permalink to &quot;1. 全局事务管理&quot;">​</a></h3><p>统一配置指定包、类、方法的切面，指定方法的事务隔离级别、超时时间、回滚策略等等；</p><p>在具体的方法中，就不需要再添加事务相关的注解，统一管理；xml/代码都可以配置；</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">tx:advice</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;txAdvice&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transaction-manager</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;transactionManager&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">tx:attributes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">tx:method</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;add*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isolation</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;REPEATABLE_READ&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">timeout</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;2000&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read-only</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollback-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;java.lang.Exception&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">tx:method</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;insert*&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">tx:method</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;delete*&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">tx:method</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;update*&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">tx:method</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;select*&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">read-only</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">tx:attributes</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">tx:advice</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">aop:config</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">aop:pointcut</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;txPointcut&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">expression</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;execution(* com.snippet.springtransaction.service.*(..))&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">aop:advisor</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">advice-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;txAdvice&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pointcut-ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;txPointcut&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">aop:config</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">tx:advice</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;txAdvice&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transaction-manager</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;transactionManager&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">tx:attributes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">tx:method</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;add*&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isolation</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;REPEATABLE_READ&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">timeout</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;2000&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read-only</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollback-for</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;java.lang.Exception&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">tx:method</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;insert*&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">tx:method</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;delete*&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">tx:method</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;update*&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">tx:method</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;select*&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">read-only</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">tx:attributes</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">tx:advice</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">aop:config</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">aop:pointcut</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;txPointcut&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">expression</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;execution(* com.snippet.springtransaction.service.*(..))&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">aop:advisor</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">advice-ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;txAdvice&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pointcut-ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;txPointcut&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">aop:config</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h3 id="_2-transaction注解" tabindex="-1">2. <code>@Transaction</code>注解 <a class="header-anchor" href="#_2-transaction注解" aria-label="Permalink to &quot;2. \`@Transaction\`注解&quot;">​</a></h3><ul><li>SpringBoot中无需任何配置，直接可以使用@Transaction</li><li>Spring中需要开启；</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnableTransactionManagement</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnableTransactionManagement</span></span></code></pre></div><p>使用时，自行添加@Transaction，需要自行指定回滚方式、事务传播方式等；</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">rollbackFor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Exception.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">rollbackFor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Exception.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_3-编程式事务" tabindex="-1">3. 编程式事务 <a class="header-anchor" href="#_3-编程式事务" aria-label="Permalink to &quot;3. 编程式事务&quot;">​</a></h3><p>自行指定隔离级别、传播方式、手动commit、rollback；</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    DefaultTransactionDefinition transactionDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DefaultTransactionDefinition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    transactionDefinition.</span><span style="color:#B392F0;">setIsolationLevel</span><span style="color:#E1E4E8;">(TransactionDefinition.ISOLATION_DEFAULT); </span><span style="color:#6A737D;">// isolation</span></span>
<span class="line"><span style="color:#E1E4E8;">    transactionDefinition.</span><span style="color:#B392F0;">setPropagationBehavior</span><span style="color:#E1E4E8;">(TransactionDefinition.PROPAGATION_REQUIRED); </span><span style="color:#6A737D;">// default</span></span>
<span class="line"><span style="color:#E1E4E8;">    TransactionStatus transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> transactionManager.</span><span style="color:#B392F0;">getTransaction</span><span style="color:#E1E4E8;">(transactionDefinition);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">        transactionManager.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(transaction);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        transactionManager.</span><span style="color:#B392F0;">rollback</span><span style="color:#E1E4E8;">(transaction);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    DefaultTransactionDefinition transactionDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DefaultTransactionDefinition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    transactionDefinition.</span><span style="color:#6F42C1;">setIsolationLevel</span><span style="color:#24292E;">(TransactionDefinition.ISOLATION_DEFAULT); </span><span style="color:#6A737D;">// isolation</span></span>
<span class="line"><span style="color:#24292E;">    transactionDefinition.</span><span style="color:#6F42C1;">setPropagationBehavior</span><span style="color:#24292E;">(TransactionDefinition.PROPAGATION_REQUIRED); </span><span style="color:#6A737D;">// default</span></span>
<span class="line"><span style="color:#24292E;">    TransactionStatus transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> transactionManager.</span><span style="color:#6F42C1;">getTransaction</span><span style="color:#24292E;">(transactionDefinition);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">        transactionManager.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(transaction);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        transactionManager.</span><span style="color:#6F42C1;">rollback</span><span style="color:#24292E;">(transaction);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="失效注意事项" tabindex="-1">失效注意事项 <a class="header-anchor" href="#失效注意事项" aria-label="Permalink to &quot;失效注意事项&quot;">​</a></h2><p>1、事务方法必须<code>public</code></p><p>2、必须能够使用到代理对象；如this调用一个事务方法，AOP不生效；</p><h2 id="事务传播" tabindex="-1">事务传播 <a class="header-anchor" href="#事务传播" aria-label="Permalink to &quot;事务传播&quot;">​</a></h2><p>目的：当出现多个事务嵌套时，如何组织各个事务的行为；</p><p>用例：<a href="https://github.com/huiru-wang/code-snippet/blob/main/SpringTransaction/src/main/java/com/snippet/springtransaction/service/UserService.java" target="_blank" rel="noreferrer">事务传播用例</a></p><p><code>PROPAGATION_REQUIRED</code>：共用一个事务，如果没有事务，就开启一个新的；</p><p><code>PROPAGATION_REQUIRES_NEW</code>：用于子事务上</p><ul><li>子事务新建一个事务，并把父事务挂起，当前事务单独执行，执行结束不受父事务回滚影响</li><li>子事务的异常也不会影响到父事务</li></ul><p><code>PROPAGATION_SUPPORTS</code>：放在子事务上</p><ul><li>父事务存在，就用事务</li><li>不存在，就不用事务</li></ul><p><code>PROPAGATION_NOT_SUPPORTED</code>：放在子事务上</p><ul><li>无论怎么样都不使用事务，如果存在父事务，挂起父事务</li><li>但是子方法抛出异常，会影响父事务</li></ul><p><code>PROPAGATION_MANDATORY</code>：MANDATORY(强制性的)放在父事务，向下嵌套</p><ul><li>存在父事务，并且是MANDATORY的，如果没有子事务，就抛出异常</li></ul><p><code>PROPAGATION_NESTED</code>：放在父事务上，向下嵌套</p><ul><li>父事务回滚，子事务一起回滚</li><li>子事务回滚，父事务不受影响；但是子事务的异常，会影响父事务，父事务可能需要catch</li></ul><p><code>PROPAGATION_NEVER</code>：用于子事务</p><ul><li>不使用事务，如果存在父事务，就抛出异常</li></ul><h2 id="回滚策略" tabindex="-1">回滚策略 <a class="header-anchor" href="#回滚策略" aria-label="Permalink to &quot;回滚策略&quot;">​</a></h2><p><strong>默认只会回滚<code>runtimeException</code>，指定回滚异常，则按指定的异常回滚；</strong></p><h2 id="事务其他参数" tabindex="-1">事务其他参数 <a class="header-anchor" href="#事务其他参数" aria-label="Permalink to &quot;事务其他参数&quot;">​</a></h2><h3 id="只读事务" tabindex="-1">只读事务 <a class="header-anchor" href="#只读事务" aria-label="Permalink to &quot;只读事务&quot;">​</a></h3><p>单个事务内：</p><ul><li>如果只有一个查询，没必要开事务；</li><li>如果存在多个查询，如果不开事务，默认对每个查询开一个事务，可能存在数据不一致情况；<strong>可以对整个方法加只读事务</strong>；</li></ul><p>使用：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">readOnly</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">readOnly</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="timeout" tabindex="-1">timeout <a class="header-anchor" href="#timeout" aria-label="Permalink to &quot;timeout&quot;">​</a></h3><p>事务超时时间，默认单位：秒</p><ul><li><p>当事务在时间范围内，未执行完成，则回滚；</p></li><li><p>默认没有超时时间，由MySQL决定事务超时时间；</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Transactional</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">timeout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Transactional</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">timeout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">)</span></span></code></pre></div>`,52),t=[p];function e(c,r,E,i,y,u){return a(),n("div",null,t)}const g=s(l,[["render",e]]);export{F as __pageData,g as default};
